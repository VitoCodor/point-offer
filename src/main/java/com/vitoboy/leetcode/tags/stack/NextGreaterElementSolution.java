package com.vitoboy.leetcode.tags.stack;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

/**
 * 给你两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。 
 * 
 *  请你找出 nums1 中每个元素在 nums2 中的下一个比其大的值。 
 * 
 *  nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1 。 
 * 
 *  
 * 
 *  示例 1: 
 * 
 *  
 * 输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
 * 输出: [-1,3,-1]
 * 解释:
 *     对于 num1 中的数字 4 ，你无法在第二个数组中找到下一个更大的数字，因此输出 -1 。
 *     对于 num1 中的数字 1 ，第二个数组中数字1右边的下一个较大数字是 3 。
 *     对于 num1 中的数字 2 ，第二个数组中没有下一个更大的数字，因此输出 -1 。 
 * 
 *  示例 2: 
 * 
 *  
 * 输入: nums1 = [2,4], nums2 = [1,2,3,4].
 * 输出: [3,-1]
 * 解释:
 *     对于 num1 中的数字 2 ，第二个数组中的下一个较大数字是 3 。
 *     对于 num1 中的数字 4 ，第二个数组中没有下一个更大的数字，因此输出 -1 。
 *  
 * 
 *  
 * 
 *  提示： 
 * 
 *  
 *  1 <= nums1.length <= nums2.length <= 1000 
 *  0 <= nums1[i], nums2[i] <= 104 
 *  nums1和nums2中所有整数 互不相同 
 *  nums1 中的所有整数同样出现在 nums2 中 
 *  
 * 
 *  
 * 
 *  进阶：你可以设计一个时间复杂度为 O(nums1.length + nums2.length) 的解决方案吗？ 
 *  Related Topics 栈 
 *  👍 345 👎 0
 * 
 * @Author: vito
 * @Date: 2021/1/22 下午2:28
 * @Version: 1.0
 */
public class NextGreaterElementSolution {

    public static void main(String[] args) {

        NextGreaterElementSolution solution = new NextGreaterElementSolution();
        int[][] two = testSubmit();
        int[] num1 = new int[]{4,1,2};
        int[] num2 = new int[]{1,3,4,2};
        int[] ints = solution.nextGreaterElementII(two[0], two[1]);
        System.out.println(Arrays.toString(two[2]));
        System.out.println(Arrays.toString(ints));

    }

    public static int[][] testSubmit() {
        int[] num1 = new int[]{137,59,92,122,52,131,79,236,94,171,141,86,169,199,248,120,196,168,77,71,5,198,215,230,176,87,189,206,115,76,13,216,197,26,183,54,250,27,109,140,147,25,96,105,30,207,241,8,217,40,0,35,221,191,83,132,9,144,12,91,175,65,170,149,174,82,102,167,62,70,44,143,10,153,160,142,188,81,146,212,15,162,103,163,123,48,245,116,192,14,211,126,63,180,88,155,224,148,134,158,119,165,130,112,166,93,125,1,11,208,150,100,106,194,124,2,184,75,113,104,18,210,202,111,84,223,173,238,41,33,154,47,244,232,249,60,164,227,253,56,157,99,179,6,203,110,127,152,252,55,185,73,67,219,22,156,118,234,37,193,90,187,181,23,220,72,255,58,204,7,107,239,42,139,159,95,45,242,145,172,209,121,24,21,218,246,49,46,243,178,64,161,117,20,214,17,114,69,182,85,229,32,129,29,226,136,39,36,233,43,240,254,57,251,78,51,195,98,205,108,61,66,16,213,19,68,237,190,3,200,133,80,177,97,74,138,38,235,135,186,89,201,4,101,151,31,228,231,34,225,28,222,128,53,50,247};
        int[] num2 = new int[]{137,59,92,122,52,131,79,236,94,171,141,86,169,199,248,120,196,168,77,71,5,198,215,230,176,87,189,206,115,76,13,216,197,26,183,54,250,27,109,140,147,25,96,105,30,207,241,8,217,40,0,35,221,191,83,132,9,144,12,91,175,65,170,149,174,82,102,167,62,70,44,143,10,153,160,142,188,81,146,212,15,162,103,163,123,48,245,116,192,14,211,126,63,180,88,155,224,148,134,158,119,165,130,112,166,93,125,1,11,208,150,100,106,194,124,2,184,75,113,104,18,210,202,111,84,223,173,238,41,33,154,47,244,232,249,60,164,227,253,56,157,99,179,6,203,110,127,152,252,55,185,73,67,219,22,156,118,234,37,193,90,187,181,23,220,72,255,58,204,7,107,239,42,139,159,95,45,242,145,172,209,121,24,21,218,246,49,46,243,178,64,161,117,20,214,17,114,69,182,85,229,32,129,29,226,136,39,36,233,43,240,254,57,251,78,51,195,98,205,108,61,66,16,213,19,68,237,190,3,200,133,80,177,97,74,138,38,235,135,186,89,201,4,101,151,31,228,231,34,225,28,222,128,53,50,247};
        int[] out = new int[]{236,92,122,131,131,236,236,248,171,199,169,169,199,248,250,196,198,198,198,198,198,215,230,250,189,189,206,216,216,216,216,250,250,183,250,250,253,109,140,147,207,96,105,207,207,241,245,217,221,221,35,221,245,212,132,144,144,175,91,175,188,170,174,174,188,102,167,188,70,143,143,153,153,160,188,188,212,146,212,245,162,163,163,245,245,245,249,192,211,211,224,180,180,224,155,224,238,158,158,165,165,166,166,166,208,125,208,11,208,210,194,106,194,210,184,184,210,113,210,210,210,223,223,223,223,238,238,244,154,154,244,244,249,249,253,164,227,253,255,157,179,179,203,203,252,127,152,252,255,185,219,219,219,234,156,234,234,255,193,220,187,220,220,220,255,255,-1,204,239,107,239,242,139,159,242,242,242,246,172,209,218,218,218,218,246,254,243,243,254,214,161,214,214,214,229,114,182,182,229,229,233,129,226,226,233,233,233,233,240,240,254,-1,251,-1,195,195,205,205,213,213,66,213,213,237,68,237,247,200,200,235,177,177,235,138,138,235,235,247,186,201,201,228,101,151,228,228,231,247,225,247,222,247,247,247,247,-1};

        int[][] result = new int[3][];
        result[0] = num1;
        result[1] = num2;
        result[2] = out;
        return result;
    }





    /**
     * 下一个更大的元素(vito)-I
     * 解答成功:
     * 				执行耗时:10 ms,击败了11.91% 的Java用户
     * 				内存消耗:38.7 MB,击败了37.06% 的Java用户
     *
     * @param nums1
     * @param nums2
     * @return
     */
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        if (nums1 == null || nums1.length == 0) {
            return null;
        }
        int[] find = new int[nums1.length];
        Arrays.fill(find, -1);
        for (int i = 0; i < nums1.length; i++) {
            int count = -1;
            for (int j = 0; j < nums2.length; j++) {
                if (count == -1 ){
                    if( nums1[i] == nums2[j]) {
                        count = nums1[i];
                    }
                } else {
                    if (nums1[i] < nums2[j]) {
                        count = nums2[j];
                        break;
                    }
                }
            }
            if (count > nums1[i]) {
                find[i] = count;
            }
        }
        return find;
    }


    /**
     * 单调栈
     *
     * 我们可以忽略数组 `nums1`，先对将 `nums2` 中的每一个元素，求出其下一个更大的元素。
     * 随后对于将这些答案放入哈希映射（HashMap）中，再遍历数组 `nums1`，并直接找出答案。
     * 对于 `nums2`，我们可以使用单调栈来解决这个问题。
     *
     * 我们首先把第一个元素 `nums2[1]` 放入栈，随后对于第二个元素 `nums2[2]`，
     * 如果 `nums2[2] > nums2[1]`，那么我们就找到了 `nums2[1]` 的下一个更大元素 `nums2[2]`，此时就可以把 `nums2[1]` 出栈并把 `nums2[2]` 入栈；
     * 如果 `nums2[2] <= nums2[1]`，我们就仅把 `nums2[2]` 入栈。
     * 对于第三个元素 `nums2[3]`，此时栈中有若干个元素，那么所有比 `nums2[3]` 小的元素都找到了下一个更大元素（即 `nums2[3]`），因此可以出栈，在这之后，我们将 `nums2[3]` 入栈，以此类推。
     *
     * 可以发现，我们维护了一个单调栈，栈中的元素从栈顶到栈底是单调不降的。
     * 当我们遇到一个新的元素 `nums2[i]` 时，我们判断栈顶元素是否小于 `nums2[i]`，
     * 如果是，那么栈顶元素的下一个更大元素即为 `nums2[i]`，我们将栈顶元素出栈。
     * 重复这一操作，直到栈为空或者栈顶元素大于 `nums2[i]`。
     * 此时我们将 `nums2[i]` 入栈，保持栈的单调性，并对接下来的 `nums2[i + 1], nums2[i + 2] ...` 执行同样的操作。
     *
     *  **复杂度分析**
     *
     *  * 时间复杂度：*O(M+N)*，其中 *M* 和 *N* 分别是数组 `nums1` 和 `nums2` 的长度。
     *
     *  * 空间复杂度：*O(N)*。我们在遍历 `nums2` 时，需要使用栈，以及哈希映射用来临时存储答案。
     *
     * 解答成功:
     * 				执行耗时:5 ms,击败了81.26% 的Java用户
     * 				内存消耗:38.6 MB,击败了57.10% 的Java用户
     *
     * @param nums1
     * @param nums2
     * @return
     */
    public int[] nextGreaterElementII(int[] nums1, int[] nums2) {
        Stack< Integer > stack = new Stack < > ();
        HashMap < Integer, Integer > map = new HashMap< >();
        int[] res = new int[nums1.length];
        for (int i = 0; i < nums2.length; i++) {
            while (!stack.empty() && nums2[i] > stack.peek())
                map.put(stack.pop(), nums2[i]);
            stack.push(nums2[i]);
        }
        while (!stack.empty())
            map.put(stack.pop(), -1);
        for (int i = 0; i < nums1.length; i++) {
            res[i] = map.get(nums1[i]);
        }
        return res;
    }


    public int[] nextGreaterElementIII(int[] nums1, int[] nums2) {

        return null;
    }
}
